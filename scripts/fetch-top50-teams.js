// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-50 –∫–æ–º–∞–Ω–¥ –∏ –≤—Å–µ—Ö –∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ GRID API
const fs = require("fs").promises
const path = require("path")

// –ò—Å–ø–æ–ª—å–∑—É–µ–º GRID API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GRID_API_KEY = process.env.GRID_API_KEY
const GRID_BASE_URL = "https://api.grid.gg"

if (!GRID_API_KEY) {
  console.error("GRID_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
  process.exit(1)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GRID API
async function gridRequest(endpoint) {
  const url = `${GRID_BASE_URL}${endpoint}`
  console.log(`–ó–∞–ø—Ä–æ—Å –∫: ${url}`)

  try {
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${GRID_API_KEY}`,
        "Content-Type": "application/json",
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    return await response.json()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message)
    return null
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function determineRole(playerStats) {
  if (!playerStats) return "Rifler"

  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  if (playerStats.awp_kills_per_round > 0.5) return "AWP"
  if (playerStats.opening_kills_per_round > 0.2) return "Entry"
  if (playerStats.support_rounds_percentage > 25) return "Support"
  if (playerStats.is_igl) return "IGL"

  return "Rifler"
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ñ—ç–Ω—Ç–µ–∑–∏
function calculatePrice(tier, role, rating) {
  const basePrices = { Tier1: 35, Tier2: 15, Tier3: 6 }
  const roleMultipliers = { AWP: 1.3, Entry: 1.25, Rifler: 1.0, Support: 0.85, IGL: 0.9 }

  const basePrice = basePrices[tier] || 10
  const roleMultiplier = roleMultipliers[role] || 1.0
  const ratingMultiplier = rating ? 1 + (rating - 1.0) * 1.8 : 1.0

  const price = Math.round(basePrice * roleMultiplier * ratingMultiplier)
  return Math.max(3, Math.min(100, price))
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-50 –∫–æ–º–∞–Ω–¥
async function getTop50Teams() {
  console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-50 –∫–æ–º–∞–Ω–¥...")

  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã GRID API
  const endpoints = [
    "/v1/teams?game=cs2&sort=ranking&limit=50",
    "/v1/teams?game=csgo&sort=valve_ranking&limit=50",
    "/v1/teams?limit=50&sort=rating",
  ]

  for (const endpoint of endpoints) {
    const data = await gridRequest(endpoint)
    if (data && data.data && data.data.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${data.data.length} –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ ${endpoint}`)
      return data.data.slice(0, 50)
    }
  }

  console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ GRID API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
  return getFallbackTeams()
}

// Fallback —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –∫–æ–º–∞–Ω–¥
function getFallbackTeams() {
  return [
    { id: "mongolz", name: "The MongolZ", ranking: 1 },
    { id: "furia", name: "FURIA", ranking: 2 },
    { id: "vitality", name: "Vitality", ranking: 3 },
    { id: "spirit", name: "Team Spirit", ranking: 4 },
    { id: "faze", name: "FaZe", ranking: 5 },
    { id: "mouz", name: "MOUZ", ranking: 6 },
    { id: "g2", name: "G2", ranking: 7 },
    { id: "aurora", name: "Aurora", ranking: 8 },
    { id: "pain", name: "paiN", ranking: 9 },
    { id: "navi", name: "NAVI", ranking: 10 },
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 40 –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-50
    ...Array.from({ length: 40 }, (_, i) => ({
      id: `team_${i + 11}`,
      name: `Team ${i + 11}`,
      ranking: i + 11,
    })),
  ]
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
async function getTeamPlayers(teamId) {
  const endpoints = [`/v1/teams/${teamId}/players`, `/v1/teams/${teamId}/roster`, `/v1/teams/${teamId}`]

  for (const endpoint of endpoints) {
    const data = await gridRequest(endpoint)
    if (data) {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      const players = data.players || data.roster || data.data?.players || data.data?.roster
      if (players && players.length > 0) {
        return players.slice(0, 5) // –ú–∞–∫—Å–∏–º—É–º 5 –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
      }
    }
  }

  return []
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
async function getPlayerStats(playerId) {
  const endpoints = [`/v1/players/${playerId}/stats`, `/v1/players/${playerId}`]

  for (const endpoint of endpoints) {
    const data = await gridRequest(endpoint)
    if (data) {
      return data.stats || data.data?.stats || data
    }
  }

  return null
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è fallback
function generateRealisticStats(tier, role) {
  const baseStats = {
    Tier1: { rating: 1.15, kd: 1.18, adr: 75 },
    Tier2: { rating: 1.05, kd: 1.08, adr: 68 },
    Tier3: { rating: 0.98, kd: 1.02, adr: 62 },
  }

  const base = baseStats[tier] || baseStats["Tier2"]
  const variation = () => (Math.random() - 0.5) * 0.2

  return {
    rating: Math.max(0.8, base.rating + variation()),
    rating30: Math.max(0.8, base.rating + variation() + 0.05),
    kd: Math.max(0.8, base.kd + variation()),
    adr: Math.max(50, base.adr + variation() * 20),
    matches: Math.floor(Math.random() * 30) + 20,
    kast: Math.random() * 10 + 70,
    impact: Math.max(0.8, base.rating + variation()),
    openingKills: Math.random() * 0.3,
    openingDeaths: Math.random() * 0.2,
    clutchSuccess: Math.random() * 20 + 25,
    multiKillRounds: Math.random() * 8 + 6,
    utilityDamage: Math.random() * 8 + 6,
    enemiesFlashed: Math.random() * 3 + 2,
    flashAssists: Math.random() * 0.2,
    supportRounds: Math.random() * 15 + 15,
    awpKillsPerRound: role === "AWP" ? Math.random() * 0.5 + 0.5 : Math.random() * 0.1,
    entrySuccess: Math.random() * 20 + 55,
    tradingSuccess: Math.random() * 15 + 70,
    clutchAttempts: Math.floor(Math.random() * 15) + 10,
    firstKillsInRound: Math.random() * 0.15 + 0.1,
    survivalRate: Math.random() * 15 + 45,
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø-50 –∫–æ–º–∞–Ω–¥–∞—Ö...")

  const teams = await getTop50Teams()
  const allPlayers = []
  let playerId = 1

  for (const [index, team] of teams.entries()) {
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É ${index + 1}/50: ${team.name}`)

    const tier = index < 10 ? "Tier1" : index < 30 ? "Tier2" : "Tier3"
    const players = await getTeamPlayers(team.id)

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ API, —Å–æ–∑–¥–∞–µ–º fallback
    const teamPlayers =
      players.length > 0
        ? players
        : [
            { id: `${team.id}_1`, nickname: `Player1_${team.name}` },
            { id: `${team.id}_2`, nickname: `Player2_${team.name}` },
            { id: `${team.id}_3`, nickname: `Player3_${team.name}` },
            { id: `${team.id}_4`, nickname: `Player4_${team.name}` },
            { id: `${team.id}_5`, nickname: `Player5_${team.name}` },
          ]

    for (const player of teamPlayers.slice(0, 5)) {
      const stats = (await getPlayerStats(player.id)) || generateRealisticStats(tier, "Rifler")
      const role = determineRole(stats)
      const price = calculatePrice(tier, role, stats.rating)

      const fantasyPlayer = {
        id: playerId.toString(),
        nickname: player.nickname || player.name || `Player${playerId}`,
        realName: player.real_name || player.fullName || `Real Name ${playerId}`,
        photo: player.photo || `/placeholder.svg?height=400&width=400`,
        role: role,
        tier: tier,
        price: price,
        team: team.name,
        teamLogo: team.logo || `/placeholder.svg?height=100&width=100`,
        stats: stats,
        hltvId: player.hltv_id || Math.floor(Math.random() * 20000) + 1000,
        country: player.country || "XX",
      }

      allPlayers.push(fantasyPlayer)
      playerId++
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 100))
  }

  console.log(`–°–æ–±—Ä–∞–Ω–æ ${allPlayers.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ ${teams.length} –∫–æ–º–∞–Ω–¥`)

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  const outputPath = path.join(__dirname, "..", "data", "top50-players.json")
  await fs.mkdir(path.dirname(outputPath), { recursive: true })
  await fs.writeFile(outputPath, JSON.stringify(allPlayers, null, 2))

  console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`)

  // –û–±–Ω–æ–≤–ª—è–µ–º mock-data.ts
  await updateMockData(allPlayers)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ mock-data.ts
async function updateMockData(players) {
  const mockDataPath = path.join(__dirname, "..", "lib", "mock-data.ts")

  const content = `import type { Player } from "@/types/player"

export const mockPlayers: Player[] = ${JSON.stringify(players, null, 2)}

export const roleIcons = {
  AWP: "üéØ",
  Entry: "‚ö°",
  Rifler: "üî´",
  Support: "üõ°Ô∏è",
  IGL: "üëë",
}

export const tierColors = {
  Tier1: "text-yellow-400",
  Tier2: "text-gray-300",
  Tier3: "text-orange-400",
}
`

  await fs.writeFile(mockDataPath, content)
  console.log("mock-data.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏")
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { main, getTop50Teams, getTeamPlayers }
